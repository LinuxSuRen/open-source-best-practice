[{"id":0,"href":"/open-source-best-practice/audios-and-videos.md/","title":"Audios and Videos","section":"Docs","content":"我们可以通过很多渠道来了解到开源相关的知识、见解、故事等等，其中音视频是一个非常生动的来源：\n视频 #  系列 #     栏目名称 类型 描述      Koala 聊开源 📼视频 个人观点分享    大咖说开源 📼视频 开源软件供应链点亮计划    COSCon'21 第六届中国开源年会 📼视频 COSCon'21 第六届中国开源年会线上演讲视频   开源特训营 📼视频  开源基础、 项目启动、 GitHub 项目管理、 如何运营社区、 社区如何评审代码、 如何提交一个合格的 PR    腾源会 📼视频 主要包括：WeOpenTalk    开源青年 📼视频 优雅地品味软件艺术    单集 #     类型 标题     📼视频  开源的魅力 - 以 Apache APISIX 为例     播客/音频 #  系列 #     栏目名称 类型 描述      开源面对面 🎧播客 由个人发起的系列访谈节目    ALC Beijing Podcast 🎧播客     开源之道 Talking 🎧播客     OpenTEKr 🎧视频 致力于构建一个可持续发展的开放科技生态圈    The ReadME Podcast 🎧播客 GitHub 官方出品，主要介绍（使用英文）开源项目    单集 #     类型 标题     🎧播客  计算机历史博物馆 - S2E7 和吴晟聊开源工程师是不是/该不该/能不能/有没有赚到盆满钵满？   🎧播客  社会人科技评论 - 开源之道：我们与开源   🎧播客  社会人科技评论 - 商业公司如何拥抱开源（与开源之道 Talking 联合出品）   🎧播客  社会人科技评论 - 开源公司到底能挣钱吗？都是怎么运作的？与开发者和投资人一起聊聊开源商业化（与开源之道 Talking 联合出品）   🎧播客  牛油果烤面包 - #70. 和 Vue.js 的创造者尤雨溪聊开源软件）   🎧播客  捕蛇者说 - Ep 08. 如何成为一名开源老司机   🎧播客  捕蛇者说 - Ep 10. 和 ctrlsf 的作者 dyng 聊聊 Vim   🎧播客  从零道一 - S3E1 | PINGCAP CTO 黄东旭 - 从 BASIC 到数据库 TIDB，探索开源创业的底层逻辑   🎧播客  从零道一 - S3E5 | Vue.js 作者尤雨溪: 框架设计就是不断地舍取   🎧播客  从零道一 - S3E6 | 涛思数据创始人陶建辉: 爱捣腾的 53 岁程序员   🎧播客  编码人声 - vol.333 编码人声：新人该怎样入坑开源项目？   🎧播客 [Vol.22 开放式协作，内容创作者也可以玩起来    "},{"id":1,"href":"/open-source-best-practice/books.md/","title":"Books","section":"Docs","content":"通过一些音视频、文章，我们可以了解到很多关于开源的知识、见解、理论。但如果希望能够更加深入、完整地理解开源，阅读相关书籍，是个不错的选择。\n 建议大家购买正版书籍，不要传播盗版电子书。\n    书名 可借阅的图书馆 书评     《新合作思维：从我到我们的商业新逻辑》  海图    《大教堂与集市》  国图  豆瓣   《开源法则》  国图  豆瓣   《不拘一格》  海图  豆瓣   《社区运营的艺术》  国图  豆瓣   《精英的傲慢》  国图  豆瓣   《海星与蜘蛛》  国图  豆瓣   《有限与无限的游戏》  国图  豆瓣   《增长的文化》  海图  豆瓣   《开源之迷》   豆瓣   《支配与抵抗艺术》  海图  豆瓣   《共创未来：打造自由软件神话》  国图  豆瓣    书单 #   开源之书·共读\n其他 #     标题 作者 来源      如何有效规划时间 适兕 LFAPAC公众号    如何成为一名成功的学生导师 柯振旭 ACL Beijing 博客    夜天之书  @tisonkun 个人博客，包含很多开源治理、开源理解、开源普及相关的文章    "},{"id":2,"href":"/open-source-best-practice/cs-student-open-source.md/","title":"Cs Student Open Source","section":"Docs","content":" 文章潜在的受众：无竞争力的普通二本科班生！ 本文将站在普通二本科班生角度从 1. 写作原因、2. 能获得什么、3. 怎么参与、4. 和其他提升方式的对比四个方面进行描述。\n 写作原因 #  作者本人，即我现在的身份是二本未毕业的科班生（2024年7月份毕业），我从大二（2022年）开始关注 Github 开源项目。专注于 Java 和 Go 语言，主要参与的开源社区是 Spring Cloud Alibaba、Apache Dubbo 社区。\n写本篇文章的目的，非常简单，正如开头说的那样——将从二本科班生的视角去描述如何参与开源和参与开源能得到什么。给和我有相同经历的伙伴们一些参考。减少自己摸索参与开源的时间、降低参与 Github 开源的难度、有更多的时间去选择自己爱好的方向和社区去获得提升，获得成长！\n参与开源有哪些好处？ #  首先，我相信大家大多都是兴趣驱动或者利益驱动。没有人无缘无故去做一件事情，都希望从中获取到正向的、积极的正反馈。相信不管是谁都能说出来几条参与开源项目的好处，这里一一列举一下：\n  学习到生产级的项目开发和维护经验；\n  这个怎么描述呢？在我看来，Github 的开源项目可以分为两类：\n 1：大公司成熟的项目分享出来，例如 Kubernetes 项目，继承自 Google 的 Borg 项目；Higress 项目等； 2：来自个人开发者一个不错的想法，作者去实现一个基本的项目，越来越多的人看到，认同作者的观点，参与项目的开发和维护。  star 数多的项目，大多都经过了生产环境的洗礼，达到了生产可用的级别，从中可以学习到许多优秀的设计模式，代码编写方式等。\n    丰富自己的见识；\n 一些好的项目，往往伴随着非常多的周边生态项目。例如 Dubbo 的 Dubbo-kubernetes，Dubbo-website，Dubbo 各种客户端实现等等项目。他们都会基于 Dubbo 衍生出一系列的周边生态。在 Dubbo-website 中可以学习到如何编写一篇通俗易懂的说明文章、在 Dubbo 客户端实现中，可以看到不同方案如何用不同语言实现、在 Dubbo 中央仓库中，可以通过 Github Action 看到，如何编写一个系统的，全面的项目测试等等。以上种种，或许可以在学校中见到，但是深度和广度是无法比拟的。    锻炼自己的表达能力；\n 在维护开源项目期间，一些 Issue 和 PR(Pull Request) 的回复都会使用英文表达。如何能够简单，准确的用英文表达出对于问题的看法也是一种能力； 开源项目中，经常会有周会或者方案评审的会议等。在参加会议中，需要很明确的讲清楚自己的方案或者自己的想法、观点等等。    认识更多志同道合、优秀的人；\n 这里就不用过多描述了，项目的 Commiter，帮你 review 代码的人等等都是非常好的导师。    简历加分；\n  说到这里，大多就是和利益驱动相关（相信大多数都是这样）了。在一个开源项目中，能够获得 Commiter （或者其他身份）的提名，就说明——你在对项目做出的贡献已经被大家认可，得到了同一个项目中其他贡献者的肯定。面试相关工作岗位的时候，就是强有力的竞争条件之一。比如说现在对校招生要求有微服务经验，如果你是 Apache Dubbo 或者 Spring Cloud 相关项目的 Commiter，肯定非常加分。\n  参与开源也从侧面表达出来一个信息——你有非常好的自学能力和探索（求知欲望）能力。\n 探索能力：刚开始接触开源，肯定会花费大量时间（自己摸索的情况下）。如何参与这件事情，门路在哪？ 自学能力：入门之后，怎么去做好这件事情，找到项目中的问题并参与调研与修复。      当然，除了上述罗列出来的几种好处之外，还有非常多的地方。这里一一列举并不能很真切的体会到，迈出第一步，实践了的人才更有发言权。\n如何参与开源，有哪些途径？ #   承接上文，都说万事开头难，那么如何才能迈出这意义非凡的第一步呢？\n 作为二本科班生来说：学校学习到的东西，接触到的资源肯定是不如 985，211 院校的，这是个不争的事实。或许因为高考失利、或者因为条件限制等等其他因素成为了二本学生。但是这都不是问题，如何在被动环境中提高自己，是我们需要关注的。除了 哔哩哔哩、Youtube 等上面的免费视频课程之外，开源项目可能是最好的选择。不管是出于利益还是出于兴趣爱好出发，在我看来：参与开源都是值得鼓励的！\n如果你现在的情况是：想提升自己的编程水平、想认识更多志同道合的，优秀的人、想简历加分但是又苦于当前囧况（技术水平薄弱，资源有效等等）无从下手，或许下面的内容会给你带来一点启发。\n下面一一列举一下（会以作者认为的难度依次递增）：\n 这里假设你已经有了自己心仪的项目或者社区。如果没有，可以根据自己的学习方向或者兴趣方向选择。\n直接关注 Github Issues 列表可能是一个好的选择，这里就不对这种方式介绍了！\n   交流群组：\n 项目 README.md 文档、Github Wiki 或者 官网都会贴出社区相关的讨论群组，可能以钉钉、Slack、邮件列表等形式出现。找到之后加入，关注一些交流群别人提出的问题，关注上下文，本地复现、研究并解决。（作为一个技术水平相对薄弱的学生而言，直接关注整个项目可能是非常吃力的） 积极参与社区周会的讨论，不懂得地方可以向主讲人提问。（00 后可能大多数都是社恐分子，我也是）我的做法是先去网上查，能够理解固然最好，理解不了可以私下加联系方式提问（这里最好是能整理下自己得问题，不要浪费时间，用最短的时间做最高效的事情是一种比较好的方式）。 找到更多伙伴——同一时间段，可能和你有相同想法的人很多，共同加入了一个交流群。相互扶持总好过单打独斗！当然，这种方式看机会也看缘分。    学长学姐带：\n 这种方式可能是最适合当前情况下的你。但是为什么把这种方式排在第二呢？因为这样的学长学姐可能不存在、或者他们没过多时间带着你做。当然如果他们愿意帮助你，你也表达了自己的意愿。这是非常好的，可以带来很多他们的经验，少走许多弯路。    周边生态项目：\n 一个好的开源项目，往往社区周边生态都是非常完善的。例如上文中提到的 Kubernets，Dubbo 等等。可以从周边生态开始，慢慢融入社区，做出自己的贡献。这种方式下需要满足几种条件，因此我将其放到了第三的位置上。  对于官网项目：有文档书写经验，前端经验，刚开始可以以文档纠错为主，逐渐适应社区。（这里具体怎么做呢？说一下我认为比较好的一种方式：边看文档边动手——官网文档中会有项目和其他组件的使用、exmaple 的介绍等等。可以按照文档说的去本地复现，即加深了对项目的理解，又能逐步参与到社区中。） 对于 awesome-XXX 项目：顾名思义，从名字中就可以看出他的作用。这里项目仓库存放的主要是和项目有关的学习资源，最佳实践等等。学习一个东西肯定要先从怎么使用开始，会使用了才能去深入研究并改进他。（这里也体现出了另外一种参与开源项目的方式，从使用中发现问题进而解决问题！） 其他仓库类似，但是要求相对较高。例如 Dubbo-go（Dubbo go 语言的客户端实现）对 Go 语言要求较高。      OSPP/GSOP：\n OSPP：Open Source Promotion Plan，每年 3 月份初开始，11 月份结束，GSOP：Google Summer of Code，每年 2 月未开始，9 月份结束。\n 这种大型开源活动，往往是全国乃至全球性的。在参加过程中，有导师指导。可以快速融入开源项目中，活动结束之后项目社区也是希望继续能够在项目中贡献。但是对选手要求较高（二本科班生几乎没竞争力，因此放到了最后一个位置上）。有句古话说得好——笨鸟先飞，可以在感兴趣的社区中贡献一段时间，要是项目有参加 OSPP/GSOP 的名额，或许会被选中。\n  其他方式的对比 #  我们生活在信息时代，获取知识，消息的渠道非常之多。大家在平时学习过程中可能会使用浏览器查找一些资源，或者去自媒体网站看一些教程等等。这些都是非常好的获取知识的渠道。那么以上几种方式和开源相比，孰优孰劣？相信这是个比较难选择的问题，即在有限的时间、精力内如何利益最大化。\n参与开源和编程比赛的对比 #    各自优势：\n 参与开源的优势上文已经列举过了，这里就不再过多赘述。 编程比赛的优势：  有钱拿（相信这是最大的优势）； 有资格证书，比赛完成之后，一般都会颁发证书； 投入时间/精力相对一段时间内集中。      缺点：\n 任何事物都有两面性，有利必然有弊。\n  参与开源的缺点：  投入时间多，战线长； 没有直接的经济收入（Github 支持除外）； 很难在短时间内获得提名。   编程比赛的缺点：  难度大（这是毋庸置疑的，奖金越高的比赛，难度必然越大）； 对基础要求高（参加项目选题之前，要求必须有相关经验。在短时间内学会项目要求的东西，过于困难了）； 需要组队（找到水平相当的人去参加比赛，这在二本学校中非常困难，个人体会）。      之上呢，是对参加开源和编程比赛进行了大致对比。从中我们可以看出，都有各自的优势和劣势。但是我认为这两者是不冲突的。为什么这样说呢？首先我们要知道编程比赛大的背景，比如最近举办的 《 开放原子开源基金会 x Apache Dubbo，下一代云原生微服务挑战赛》便是由 Dubbo 社区组织的比赛，题目也和 Dubbo 开源项目相关。提前参与开源社区，能提前了解开源项目需要的技术栈，认识到更多有相同兴趣的人。对参加比赛也有帮助！\n殊途同归，不管是参与比赛也好，参与开源项目也罢。都是为了提升自己，如果有充足时间的前提下，我的建议是参与开源项目！\n参与开源和 Leetcode 的对比 #  这两者我认为也是不冲突的？之前参与编程比赛不冲突，这里又不冲突？听我分析一波：\n刷 Leetcode 的目的是什么？（站在我的角度分析）\n 提高编程思维，锻炼基础代码能力； 应对笔试； 算法竞赛。  不冲突的原因是什么？\n 学算法，锻炼思维是为了写出更优秀的代码。代码的最终落地应该是写到项目中去，两者应该是属于地基和大楼的关系，地基牢固了，才能保证大楼不会歪斜乃至倒坍。 开源项目正好是当前可以接触的大型项目，其中有非常多优秀的项目，被应用到生产环境中去。你可以在这里大展拳脚； 刷题准备面试也一样，笔试成绩通过才能有面试机会。开源项目经验也能简历初筛，面试加分。  刷题往往是一个枯燥的过程。一些困难的题目，学习难度是非常大的。这点对比开源是类似的，当有大的 feat 更新时，往往需要很多的调研才能慢慢完成。两者都需要投入大量时间和精力才能获得收益，这点是相似的。\n因此我认为两者并不冲突，可以一起进行！好的地基，好的大楼都是我们需要的。\n文末总结 #  文章中，主要是对参加开源能够获得哪些好处和如何参与开源做了描述，受众人群是二本科班生。我相信受众人群是非常广的。\n因为个人经历尚浅，只能尽自己所能写出有限的内容。希望你在阅读了本文章之后，能够在如何参与开源上给你一些启发。\n"},{"id":3,"href":"/open-source-best-practice/encourage-community-members.md/","title":"Encourage Community Members","section":"Docs","content":"如何通过适当的机制给予社区贡献者一定的激励 #  首先，需要明确的是：激励不能等同于劳务报酬，更加不是“外快”，激励是要对有意愿和动力的贡献者加以认可，给予一定的物质反馈。\n激励的形式，可以有：社区活动相关的差旅补助、周边礼品、社区荣誉、社区重要角色提名、资金赞助等。\n差旅补助 #  对于在社区中有重大贡献的，在类似于社区年度大会中，给予一定的差旅报销额度。对此，我们需要解决下面的问题：\n 什么算是重大贡献 差旅报销额度 同一贡献者给予补助的周期（例如：不可连续） 资金来源、资金池的管理  周边礼品 #  社区荣誉 #  常见的社区荣誉有：Top Ambassdor、Top Contributor、New Ambassdor\n重要角色提名 #  根据社区的实际组织架构，这里的重要角色可以有：SIG Co-leader、TOC member\n对于已经在社区中作出重大贡献（不局限于代码），尤其是已经体现出来一定的领导力的贡献者，社区应该及时提名担任更加重要的角色。这对于社区和贡献者都有着重要的意义。\n资金赞助 #  如何让外部贡献者更加有动力 #  贡献者包括两类：游客（偶发性、简单的）、实际用户。对于这两种贡献者都要加以重视，但需施以不同的策略。\n游客 #  最核心的是——要把参与贡献的难度降到最低，让短暂、偶发性贡献成为可能。\n实际用户 #  社区的实际用户参与贡献是有切实的、可持续的动力的，这应该成为我们重点。\n"},{"id":4,"href":"/open-source-best-practice/encourage.md/","title":"Encourage","section":"Docs","content":" 目标读者：了解参与开源的益处，希望能激励更多团队成员参与开源。\n 如果你已经深刻地明白了参与开源的各种益处，那么，该如何鼓励、激励团队中其他成员积极地参与到开源社区建设中呢。\n我们首先需要认识到，开源项目和闭源项目的协作方式上，有非常大的区别。单纯地给团队成员分享参与开源的好处，往往是收效甚微。每个人的过往经历各不相同，思维方式，认知等都有着不同程度的差异。甚至，在特定的阶段中，并不是每个人都适合参与开源。因此，设定一个合适的激励政策就非常重要了，需要通过挖掘、鼓励、激励的方式让一部分人先动起来，让这部分人尝到了好处、感受到开源的氛围。然后，再进一步巩固参与开源的成果。\n参与开源并不只有提交代码这一种方式，有参与开源的兴趣、热情就成功了一半。每个人都可以应该先做自己擅长的事情，以增加参与的自信心。\n积分制度 #  在条件允许的情况下，可以参考如下的激励制度：\n实行参与开源积分制，并定期（或不定期）根据积分来兑换奖励\n 公开演讲  meetup 演讲，200 积分 技术峰会、Conference，500 积分 全球大型技术峰会，800 积分 对于使用第二语言（非母语）进行分享的情况，额外增加 100 积分   向上游社区提交 PR  普通缺陷修复、小的功能点，100 积分 重大缺陷、大的功能，300 积分   以组织者、志愿者等身份参与社区活动  在开源社区、开源基金会中被选为 Ambassador， 200 积分 在开源社区、开源基金会上给予年度性的奖励（例如：最佳贡献者、最佳布道者等），200～500 积分 在其他社区担任 SIG Leader 等角色，500 积分 成为上游社区项目的 Member，500 积分 成为上游社区项目的 Maintainer，1000 积分 此处，可根据不同的上游社区的要求的高低给予不同的积分    以上的活动建议以及积分数只是方向性指导，具体实施时应根据具体情况来定。建议 1 积分对应 1 人民币，达到 1000 积分后，可以消费积分来购买等价的商品，团队给予全额报销。\n 开源社区内，非常需要跨技能的合作，例如：运营、研发、测试等角色之间互相了解、配合。因此，建议对于跨职能的贡献行为予以鼓励和支持。同样地，对于运营、产品等职位的同学，公开演讲在某些团队中如果是作为本职工作的话，不建议参与积分。\n 方向选择 #  为了让大家在选择上游社区时，更加聚焦、对团队帮忙更大，建议优先选择如下的项目：\n 团队项目中所依赖的核心上游项目 团队相关领域的，托管到 Linux Foundation、Apache 等大型国际开源基金会的项目 主仓库的贡献   对于和团队项目的技术栈、领域不相关的开源上游项目，不建议予以积分奖励。只有让团队成员积极地参与到相关领域的上游社区，才能让激励制度正向循环。\n 在具体实施时，建议明确地列出来希望大家参与的上游开源项目，鼓励大家新增上游项目并给出理由。\n总结交流 #  互相感染，要远比说教、任务安排来的效果要好。设定一个周期，让大家互相交流参与上游社区的经验、成果，甚至可以晒晒各自的积分。例如，可以是每个季度进行一次交流。\n导师制度 #  集体交流，不合适太频繁。我们需要更多小的、高效的交流，导师制度会让参与开源社区经验较少的同学少走弯路，更加自信。\n而且，传帮带、师徒关系，会让团队成员之间合作更加默契。在条件允许的情况下，设置适合的导师制度。\n开源协作中没有身份、没有特权，不要等着被领导，每个人都是解决问题的中坚力量。\n"},{"id":5,"href":"/open-source-best-practice/english.md/","title":"English","section":"Docs","content":"英文虽然不是参与开源的必要能力，但却与是否可以深度参与开源有着很大的关系。如果你希望能进一步提高自己的英文水平的话， 可以试试下面给出的一些资料，也欢迎帮忙补充！\n   名称 形式 适合级别      All Ears English 播客，全英文 中级    潘吉 Jenny 告诉你-学英语聊美国-开言英语 播客，中英混合 初级    "},{"id":6,"href":"/open-source-best-practice/event.md/","title":"Event","section":"Docs","content":"为达成特定目标，开源社区、组织、个人往往会采用活动（Event）的形式，将相关人群聚集在一起，借助主题分享、动手实践、成果展示等来增强相互间的联系，亦或是宣传、推广特定信息。\n从物理空间上来看，可以将活动划分为两大类：线下活动、线上活动（online）。\n从时间跨度上来看，常见有：半天、一整天、三天、以及更长时间范围的活动。诸如 Meetup、沙龙等通常是半天的时间；而某某峰会可能会持续一整天或者更长一点的时间；三天左右的活动往往会是面向国际的大型会议，人数可能也会超过 1000 人；而那种跨越一个季度甚至更久的活动，多半是线上的、需要持续参与的活动，例如：开源之夏、Google Summer of Code。\n从面向的主要受众来看，也会有很多不同的情况，例如：面向企业、商业的，面向生态，面向开发者，面向最终用户（end user）等。\n从活动主办方来看，可能会是政府、行业协会、商业公司、社区、个人等发起或主办。\n写给活动组织者 #  鉴于本人没有组织大型（超过一天）会议的经验，本文仅提供小型活动的一些建议。\n线下活动 #  线下活动提供的是一种面对面交流的形式，可以让参会者之间产生形象的、深刻的影响。线下活动有着明显的优势，但同时也需要活动组织则付出更多的精力。\n以下是线下活动大致会涉及到的一些要素和类型（可重叠）：\n   要素/活动类型 聚会 分享 互动 直播     场地 人数决定场地大小 投影（或电视），音响、麦克风，翻页笔 扇形座位摆放便于互动 摄像机、捕音设备   宣传 聚会形式 提前确认讲师分享题目以及讲师背景介绍  给出直播观看渠道   人员 签到，拍照 跟踪讲师分享资料，现场时间把控 主持人，抽奖 直播技术保障   报名 提供清晰的活动描述，背景等 如有需要可以提供 CFP      场地无疑是线下活动最重要的要素之一，不同的活动类型，对场地有着不同的要求。首先，选择交通便利的位置，避免那些路标不清晰的地方。如果场地物业有门禁要求的话，提前与场地提供方约定进入产地的方法，例如：入口安排专人接待，与前台约定进门暗号、口令等，佩戴特定胸牌。为方便参会者及时找到会场房间，可以在入口处、转角处摆放易拉宝或张贴指路牌。接下来就是场地房间的配置了，有演讲诉求的，需要确认投影仪、音响、麦克风等设备可用，以及可容纳的人数。另外，对于驱车到会场的参会者，场地是否支持停车位也非常重要。\n按照活动规模的预期，可以选择不同的宣传策略、渠道。例如：小规模的、随缘的聚会活动，可能在私域社交圈宣传下即可，诸如在微信朋友圈发布。而有一定参会人数期望的话，需要适当地加强对宣传的重视，可以选择诸如： 活动行、 百格活动、 Meetup 等专业活动网站，社区（或组织）的社交媒体账号发布活动，联合具有相关性的社区（或组织）转发活动信息（这时候可以与对方进行资源交换，例如：Logo、品牌露出等）。\n通常可以提前三周左右对活动进行宣传，分别在第一周、第三周发布宣传文章。活动结束后，可以再发布一篇活动回顾的文章，内容可以包括：活动当天情况概述、到会人数、照片、感谢对活动支持的人或组织。如果是系列活动，或者多场活动之间有着强的相关性的话，建议有一个集中的地址可以看到每一期的活动信息，以方便后了解到活动的人翻阅。\n人员组织方面，活动发起人需要对活动进行统筹安排，确保活动的关键环节没有被遗漏。为避免发生遗漏情况发生，建议每个重要环节都有专人负责，活动发起人（或出品人）与具体环节的负责人进行对接。\n 嘉宾邀请，需要跟踪以及收集嘉宾的分享文稿，必要时通过微信、电话等方式提醒嘉宾交稿时间。 现场主持人，出品人往往是比较适合充当这个角色。 拍照、摄影以及后期整理。 现场签到，现场引导。 直播技术保障。 嘉宾演讲时间控制，可以考虑用沙漏，或者是志愿者在会场后面举牌的方式。  对于报名环节，通常专业的活动发布平台会同时支持报名、统计等功能。如果没有采用专业活动平台的话，也可以考虑问卷系统报名（例如： 腾讯问卷）。按照经验来看，一般热度的线下活动，实际到场人数会占到报名人数的 50%。也就是说，如果希望能有 30 人到场的话，尽量确保有 60 左右的报名人数。\n礼品、茶歇。主办方可以根据自身条件，提供适当的茶歇，例如：矿泉水、饮料、点心、面包等。也可以考虑寻找活动支持方提供。常见一些周边礼品，包括：T恤、开源项目贴纸、书包、帆布袋、书籍等等。\n有直播诉求的活动，主要考虑现场设备、直播工具、直播平台等问题。现场设备，可以考虑配置面向参会者以及演讲嘉宾的摄像头，以及更好拾音效果的领夹麦克风。常见的直播平台有：哔哩哔哩、视频号等。如果想要使用免费的直播推流工具，可以考虑 OBS 这个开源的工具。\n活动当天的流程参考：\n 活动组织者、志愿者，至少提前一个小时到达现场，完成场地布置、设备调试等 场地引导、参会签到 主持人开场（1 分钟） 活动主体 适当的中场休息 选择人数最多的时候（可能会有人提前离场），合影留念 活动结束后，清理垃圾，座位恢复摆放等   会议开始前，需要提醒参会者主动将喝完的饮料瓶、吃完的食品包装袋扔到指定垃圾箱，保持会场干净、整洁。 如果条件允许的话，可以提供类似于沙漏、计时器等工具来提示讲师的演讲时长。但这些提示工具需要摆放在讲师正对面。 为了能够持续改进活动体验，在结束后邀请大家填写匿名反馈问卷。 避免卷入太多角色、利益方，否则会让活动本身变得不再单纯，进而四不像 讲师的选择问题上，尽量只包含一位经验不丰富的讲师\n 线上活动 #  TODO\n写给活动参与者 #  我们每个人的精力都是有限而且宝贵的，了解活动的性质以及相关背景信息是非常有必要的。\n比如，对于希望了解、学习以及应用技术的同学，建议尽量避开面向商业、生态的会议，这一类会议中大比例的内容不会提及具体的技术内容，商业产品推广、广告内容会让你倍感失落。\n"},{"id":7,"href":"/open-source-best-practice/financing.md/","title":"Financing","section":"Docs","content":" This file was generated by financing.tpl via yaml-readme, please don\u0026rsquo;t edit it directly!\n 越来越多的商业公司依靠开源得到了融资，欢迎对开源商业化感兴趣的朋友们一起维护下面的列表（融资记录 35）：\n   日期 公司名称 融资情况 投资方      2023年6月 飞轮科技 数亿元 数亿元    2022年9月  欧若数网 数千万美元，A 轮融资 经纬创投    2022年7月14日  北京白鲸开源信息科技有限公司 数千万元 凯泰资本领投、蓝驰创投跟投，沧澜担任本轮独家财务顾问    2022年6月  天谋科技（Timecho） 近亿元人民币天使轮融资 红杉中国领投，考拉基金、戈壁创投、云智慧共同跟投    2022年4月 飞轮科技 天使轮和天使 + 轮，超 3 亿元 IDG 资本、红杉中国等 VC    2022年2月7日  太极图形  5000 万美元 A 轮 由源码资本、GGV 纪源资本、BAI 资本联合领投，老股东红杉中国持续加码    2022年2月25日  Allegro 熹乐科技 天使轮，300 万美元 耀途资本独投，源合资本担任独家财务顾问    2022年2月10日  澜舟科技 Pre-A轮，近亿元 联想创投、斯道资本共同领投和创新工场跟投    2022年1月17日  深势科技 B 轮，数千万美元 源码资本、启明创投共同领投，老股东高瓴创投、经纬创投等继续加码，奇迹资本担任本轮融资的独家FA    2022年1月  SphereEx Pre-A轮，近千万美元 嘉御资本领投，红杉中国种子基金、初心资本、指数创投跟投，指数资本担任独家财务顾问    2022年09月06日  ILLA Cloud艾拉云科 数百万美元，天使轮融资 源码一粟，高瓴创投联合领投    2022年08月25日  Zilliz 6000 万美元，B+ 轮 沙特阿美（Aramco Ventures）旗下的多元化成长基金 Prosperity7 Ventures 领投，老股东淡马锡旗下 Pavilion Capital 、高瓴创投、五源资本和云启资本继续加注，多维资本担任独家财务顾问    2022年03月17日 和鲸科技 数千万元，A+ 轮 考拉基金领投，翊翎资本、线性资本、中驰源道、五源资本等跟投    2021年底  燧炻创新 Pre-A 数千万元 青云科技领投    2021年9月14日  StreamNative A 轮 2300 万美元 沙特阿美旗下多元化风投基金 Prosperity7 Ventures 与华泰证券旗下另类投资子公司华泰创新联合领投，老股东红杉中国、源码资本继续加码    2021年6月18日  支流科技  A+ 轮，数百万美元 经纬中国领投，顺为资本和真格基金跟投    2021年5月24日  涛思数据 B轮，4700万美元 经纬中国领投，红杉资本中国基金、GGV纪源资本、指数资本跟投，指数资本担任独家财务顾问    2021年3月23日  支流科技 A 轮，数百万美元 顺为资本领投、真格基金跟投的    2021年2月4日  支流科技  Pre-A 轮，百万美元 真成投资领投，真格基金跟投    2021年11月22日  Jina AI A轮，3000 万美元 新投资方美国投资机构 Canaan Partners 领投，Mango Capital 以及原投资方 GGV纪源资本、SAP.iO 和云启资本参与跟投    2021年11月1日  原语科技 数千万人民币，天使轮 泰岳梧桐资本、相泰投资    2021年10月  快猫星云 天使轮 高瓴创投，初心资本    2021年08月  星汉未来 天使轮，数百万美元 初心资本，明势资本    2021年  Datafuse Labs 天使轮 高瓴创投领投，老股东华创资本、九合创投跟投    2021年  Datafuse Labs 种子轮 华创资本领投、九合创投跟投    2021年  燧炻创新 数百万元 北京佰才邦技术有限公司领投，北京鲸鲮信息系统技术有限公司与北京即联即用创业投资有限公司跟投    2020年8月  StreamNative Pre-A 轮 数百万 源码资本领投、红杉中国跟投    2020年11月16日  欧若数网 Pre-A+ 轮，近千万美元 源码资本领投，经纬中国、红点创投和中国基金本轮跟投    2020年11月13日  Zilliz B 轮 4300 万美元 高瓴创投领投，挚信资本和 Pavilion Capital 跟投    2019年3月  欧若数网 300 万美元，天使轮 经纬投资领投    2019年11月08日 和鲸科技 数百万美元，A 轮 晨兴资本领投    2019年07月17日  Second State A 轮，300 万美元 海纳亚洲资金    2019年  StreamNative 天使轮 红杉中国    2018年5月  Zilliz A 轮 1000 万美元 晨兴资本，松禾资本，云启资本，靖亚资本    2017年8月  Zilliz 数千万元天使轮 晨兴资本，松禾资本，云启资本，靖亚资本    名词解释 #     名词 描述     VC Venture Capital，即风险投资   PE Private Equity，即私募股权融资   FA Financial Advisor，财务顾问    "},{"id":8,"href":"/open-source-best-practice/good-first-issue.md/","title":"Good First Issue","section":"Docs","content":"开源项目的贡献者群体，大致呈倒金字塔的形态。\n项目的管理、规划、主要特性开发或重大缺陷的修复，这些通常是由少量核心的贡献者完成，这可以认为是金字塔的顶部驱动。\n还有一些贡献者，提交记录不是很多，但项目参与度也比较紧密；这类贡献者的数量通常也不少，可以认为是金字塔中间力量。\n数量最大的部分，是那些有着零星贡献提交记录的贡献者，也正是我们现在讨论的重点：“游客”贡献者。这些“游客”虽然不会贡献重量级的内容，但对一个开源项目而言，同样是有着非常重要的意义：\n 每一位重要的贡献者都是从“游客”开始的，我们想要增加贡献者的数量和“质量”也要从这里着手 源源不断的“游客”加入，可以让项目呈现出繁荣的景象 新人友好程度是开源项目的成熟标志之一  那么，什么样的 issue 可以标记为 good-first-issue 呢？从字面上看，这是对新人（初次接触）友好的 issues，也就是对于这类贡献者而言比较容易解决的 issue。\n因此，判断是否应该把一个 issue 标记为 good-first-issue 可以从这两个角度考虑：\n  如何定义“新人”？\n  如何定义“友好”？这里的“友好”，一方面是指参与流程的清晰（当然，这是更广泛的社区治理的范畴），另一方面是指参与要求的明确\n   有清晰的技术栈要求  “新人”和技术水平的高低无关，只表明初次接触某个项目 从更加客观的角度来讲，issue 的创建者可以列举出来完成这个 issue 所需要的技能   有清晰的上下文描述  即使技术水平”高“的贡献者，在不了解 issue 的上下文、背景的前提下，依然是很难去完成 解决 issue 需要的技能   没有明显（或潜在）的时间约束  我们不清楚“新人”什么时候会关注到这些 issue，因此，不要把这些 issue 和你的 milestone（或其他版本发布计划）挂钩   有助于贡献者了解项目结构（可选）  “新人”完成 good-first-issue 的价值不仅仅是可以增加贡献者数量，更有意义的地方在于：可以帮忙更多贡献者进一步熟悉、了解项目的贡献流程以及项目本身    模板 #  为了方便大家对 good-first-issue 有更形象的认识，我下面给出一个模板：\n## Background ## Technical requirement ## Expect ## Potential TODO list 工具 #  自动化工具的应用，对于一个开源项目而言是极为重要的。来自 Kubernetes 社区的 Prow 可以帮助项目维护者更好地使用标签。\n其他 #  GitHub 还提供了一个隐藏（没有直接调整的按钮或菜单等）的页面，参考如下——在某个开源项目的仓库地址后加 contribute 即可访问：\n https://github.com/LinuxSuRen/open-source-best-practice/contribute\n"},{"id":9,"href":"/open-source-best-practice/how-to-contribute.md/","title":"How to Contribute","section":"Docs","content":"Get started #  仔细阅读项目自述文件（README），遵循贡献指南（CONTRIBUTION）中给出的流程。\n面对一个新的项目，尤其是在相对不熟悉的领域，有如下的方法可以帮助你提供前期的贡献：\n 文档贡献，这是非常有效的一种了解项目的方式，通常我们可以在阅读文档的过程中，修复一些错别字、标点符号、语法错误、无效链接等等  good-first-issue，对于希望收到更多贡献的项目而言，会在一些容易上手的 issues 上添加该标签  Issues #  常见误区：\n 只有标题，没有内容 只有结果、现象，没有提供上下文  问题出现的可能性千千万，没有人能猜到你的环境、操作步骤   只有截图，不提供错误、异常、上下文的关键文字  没有文字的话，不便于其他人进行检索    最佳实践：\n 现有的 issues 中没有提到过该问题时再提交新的 熟悉语言一定要遵循对应社区期望的规定 标题要简洁、规范 做好分类，可以通过标签或者标题前缀来分类  常见的标题分类法：Question: xxx, Proposal: xxx, Bug: xxx   和 UI 相关的 issues 要给出截图  Pull Request #  常见误区：\n 使用单一分支（例如：master）提交变更 单个 PR 中包含多个不同的优化、缺陷修复 单个 PR 不断新增内容 合并自己提交的 PR 通过及时聊天工具催促特定的人 review 你的 PR  最佳实践：\n 首次提交 PR 前，浏览已经成功合并过的 PR 评论列表以及格式等 如果要修复的问题已经有对应的 issue，请确保没有人提交对应的 PR，然后，请留言说明你的修复计划 如果估计你提交的变更比较多，请首先创建 issue，并依据具体情况（难易程度、争议性等）描述你的想法 一个 PR 只能包含一类修改 对于 feature 或者 bugfix 相对复杂的情况，也要考虑到如何能给 reviewer 减轻 review 压力  首先，思考下是否可以把一个“大型” PR 分成多个 在提交 PR 之前，确保已经进行了充分的自测，并一定要关注下你的 commit 记录（相当于“卷面分”），只保留你希望被合并到上游的记录（其他的都可以提前 squash） 小技巧：可以先在自己的 fork 后的仓库中提交一个 PR 来复查下，看看是否足够“优雅”   每次提交都需要新增一个分支进行 避免同一个主题的 PR 反复关闭、新建  避免在同一个 PR 中频繁地提交，这对于 reviewers 来说将会是极大的困扰 如果你的 PR 还没有准备好接受 review，请在标题上添加前缀 WIP: ，直到你自测充分 在根据 reviewers 提出的建议进行修改时，避免使用强制推送 --force，这对于 reviewers 来说将无法轻松地看到你最新修改的部分 尽可能保持你的 commit 记录比较优雅，万一多次 review 后的记录比较多的话，项目 owners 会在合并时决定是否会 squash 你的提交记录   尽可能多地给出当前 PR 的详情，包括但不限于：相关 issues、解决的问题、任何方便 review 的上下文  涉及到 UI 的改动，给出修改前后的效果截图 视情况给出你的自测过程 对于可能引起争议的部分，给出你的解释 如果你认为当前 PR 合并后可以修复对应的 issue，那么，请使用类似于 close #123 的 表达式。   如果你的 PR 超过一周没有得到 review，可以尝试 cc 相关的 team  如果没有相关的 team 可以 cc 的话，可以找最近合并过类似 PR 的人，并说明是由于找不到其他的方式，以及表示抱歉打扰    以下是常见的流程： "},{"id":10,"href":"/open-source-best-practice/insist.md/","title":"Insist","section":"Docs","content":"“坚持就是胜利”，这是非常普通，却很实用的一句话。\n参与开源，相比于你做其他事情，并没有什么特殊的地方，只要能坚持足够长的一段时间，就一定能有所收获。\n关于坚持这件事情，是最容易、同时也可能是最难做到的。我们可以举出很多的例子来：坚持每天背 5 个英语单词、坚持跑步等等。事情本身往往比较容易，这里难的地方在于：只说要坚持了，却没有给自己一个清晰的时间限制。那么，如何才能解决“坚持”的问题呢，首先，让我们针对可能导致“坚持不下去”的因素做个分析。\n 环境 动力 方法 时限 情绪  对于现阶段的机器（人）、程序而言，只要有合适的环境（软硬件）、足够的电力、可运行的代码（指令），几乎是（忽略损耗部分）可以永久性地坚持的。相比于动物、人类而言，这是机器天然具有的、极大的优势。\n对于绝大部分的普通人来说，总是会有各种各样的情绪存在，而情绪则极大地影响我们能在某件事情上投入的时间、精力，甚至于还能影响到智力的发挥。例如，当你的大脑中充满困意，很想休息，却有和你息息相关的意外发生时，困意几乎可以是瞬间就消失了。有情绪（或感情），是人与动物得以区分的重要特点之一，这一点自然是无法断绝的。实际上，比较容易控制的一个因素就是“时限”。与其两级分化，动辄“宣称”永久做什么，亦或企图“立竿见影”，不如耐下心来认真地给自己设定一个期限。一些简单的事情，努力一年大致会有一个阶段性成果；复杂一些的事情，也许需要三到五年；而你如果希望能做到顶尖级别的，可以试着了解下 “一万小时定律”。\n个人参与开源，至少给你自己一年的时间（机会）。选择一个适合自己的开源社区（项目），积极地参与一年。这样可以让你加深对开源的认识，也只有这样你才能有理由来说服自己是否要在开源领域投入自己更多的精力。\n那么，一年内都该做哪些事情呢？做到什么程度可以认为是“积极地”参与呢？大致上，可以分为两种方法：设定一些数字化指标（目标、flag）；感性的认识。\n数字化的目标，容易理解，但仅供参考，请避免一味地追求数字。根据自己的情况，选定一个开源社区，从如下列表中选择部分作为你的目标：\n 10~15 个代码类的贡献 提交 20 个 issue 20 个文档类贡献 参加 10 次社区例会，积极参与发言 积极参与社区线上线下活动：议题分享、志愿者 其他  所为感性的认识，可以理解为通过一些 contribution 让社区成员可以熟悉你，经常看到你的“身影”。\n参与开源，从某个层面上理解，可以认为是一种基于特定主题的“社交活动”。如果只是“观察式”的，被动地参与，不去主动地和社区成员交流，可能算不上是积极。\n"},{"id":11,"href":"/open-source-best-practice/mentor-plan.md/","title":"Mentor Plan","section":"Docs","content":"如何让开源社区持续保持活跃 #  开源导师计划 #  开源导师计划，为了给有兴趣深入参与开源，并希望得到一定指导的人一次共同学习的机会。\n需要注意的是，导师制并不是要培训、讲解如何参与开源，更不是教你学习任何具体的技术。这个计划大致的形式是：导师给出一系列任务，参与者来完成任务。以下是细节：\n周期 #  一年\n参与者人数 #  不超过两人\n进度同步 #  两周一次\n任务 #  参与者需要和导师共同制定要完成的任务，并明确完成的标准。导师应该根据学员的具体情况给出相应的指导意见。\n选择一上游社区并跟进 #  形式包括但不限于：\n 每月至少参与一次社区例会 了解社区运营方式 至少参与一次社区的活动 提交一次代码 PR，已经其他 PR 若干  跟进本社区的一名外部贡献者 #  形式包括但不限于：\n 积极跟进对方提的 issue 或者 PR 了解对方在参与奔社区过程中遇到的困境，并设法解决 进行2～3次的访谈，并形成文字记录  成果展示 #  一个季度一次\n 技术博文 社区动态介绍，包括：技术、社区活动 视频教程 所跟进的外部贡献者的成果，收到的反馈  通用技能 #   英语（听说读写） 演讲  同步、交流 #   例会，两周一次 成果展示，每月一次  "},{"id":12,"href":"/open-source-best-practice/motivation.md/","title":"Motivation","section":"Docs","content":"开源是什么 #  在很多地方，开源更多的是在说“开源软件”。但，除了软件以外，开源精神最具有启发性的在于——人和人之间的协作方式上，平等、开放、协作、共享。\n 平等，人与人之间没有等级、阶层之分，主要体现在讨论问题、决策过程中，大家基于共识而不是权利 开放，这一点强调的是，整个开源活动应该是公开的，包括：提议、过程、结果 协作，避免单打独斗、英雄主义、个人主义 共享，乐于分享协作成果，以及成果的二次创作  为什么要参与开源 #  基于开源协作的特性，你的舞台不再局限于某个公司、某个团队，你所需要思考的也不再只是编码、测试、设计、推广等单一的角度。对于不同（岗位）角色的人来说，参与开源的意义略有不同，下面会分别讨论。但，确认无疑的是，你一定是有机会去从不同的视角来考虑问题、承担责任。\n研发 #  对于在从事研发类（包括：开发、架构设计、测试、运维等）工作的人而言，是非常适合参与开源的。通过在开源社区的磨砺，大致可以从如下几个方面得到提升：\n 技术成长 软实力 职业方向多样化 其他  技术成长 #  企业内部项目的生命流程，通常都会和公司的商业模式、市场价值、经营水平有着密切的关系，企业为了追求价值的最大化，完全可以新开发一个项目、或者直接下线一个项目。尤其对于普通的研发人员，往往是没有任何发言权的。而对于项目上的技术、框架选型，在垂直型结构的团队中也是“领导”决定的。\n因而，可以想象到，普通的研发人员在日常的研发工作中往往会处于被动的地位，被动地去学习、使用某种技术，被动地去完成某项任务。在这种环境下，大部分人的创新、主管能动性是难以调动起来的。很多 IT 从业人员，也就会有“打工”、“北漂”的深切感受。\n在开源项目中，往往是没有明显的阶级、等级之分，所有的任务（issues）都是自愿、主动在做，而每个人都可以向社区提出你的提议，社区成员也会基于共识、规范来 review 你的 PR 或者提议。而在 review（不是审核、审查）过程中，你也许会收到在这个领域非常资深、经验丰富的贡献者的反馈。\n软实力 #  好的沟通能力，在开源项目中是很基础的能力之一。在开源协作过程中，由于地域、文化、时区的不同，大部分的交流是异步进行的。也正是由于无法实时收到回复，大家在交流的过程中，通常会事先把事情的来龙去脉尽量弄明白，并给出自己的调查结果、建议、不同方案的对比等等。\n声誉，也许是很多 IT 从业人员还没有意识到的一项宝贵资产。简历是极容易作假的环节，良好的表达能力也可以让候选人通过面试，及时是背景调查也无法让面试官了解到候选人过往的细节。因此，是否有大厂经历、高学历，（或者是运气）在很大程度上决定着我们是否可以进入到更大的平台中。\n然而，参与开源的经历、成就则通常是公开的，任何人都可以查阅到。因此，对于参与开源的每一位贡献者都会很关注自己的行为，以及带来的影响。而对于用人单位，也同样是可以对此很放心。\n职业方向多样化 #  开源项目的健康发展，不仅仅需要优质的代码，更加需要不同角色的人的共同努力。从需求的收集、整理，功能实现、问题修复，以及技术推广、问题反馈等，一个正向的闭环机制是开源社区长久健康发展的秘诀。\n从技术推广的角度来讲，通常的方法有：编写技术博客、视频教程、技术分享等等。做这些工作，会对技术总结、演讲技巧上有极大的提高。这对于以后考虑选择技术布道师这个岗位来说，应该会有很大的帮助。\n如果平时在社区活动组织、协助上付出比较多的话，之后也许是可以走向开源社区运营的方向。\n在企业内部，通常是职责分明，大多数研发没有机会直接接触到客户（用户），因而也难以培养产品思维。而对于开源项目的维护者，则为了让自己的产品更有竞争力、更加贴近最终用户的需求，则需要从产品整体来思考、规划、设计。借此，走向产品经理的路，自然也是极为可能。\n其他 #  有一些刚刚踏入 IT 行业从事软件研发工作，但英文水平比较一般的人，在经过几年的工作后可能会觉得英文水平的高低似乎也不会对本职工作有多大影响。之后，不管是在搜索资料，还是阅读文档时，逐渐会对英文的资料敬而远之。甚至，当遇到把英文作为第一交流语言的开源社区、开源项目时，表示很不理解；明明都是中国人，却非要用英文。\n这里，我们不讨论开源项目中到底应该以何种语言为首选。确认无疑的是，只要你愿意暂时放下已有的观念，潜心地、虚心地参与到开源社区中来，对于学习语言的看法一定会有很大改变的。人随心动，放空自我，随着社区一起成长，英文水平的大幅提高几乎是必然会发生的事情。\n除了语言本身的学习、成长之外，参与开源还可以让你的思维方式、理念保持长久的年轻、不僵化。人总是会容易骄傲自满、固步自封，然而如果你始终坚持开源的基本原则的话，不管你获得过多大的成就，你也还会乐意和新加入的朋友一起畅聊。\n参与开源的原动力 #  我们做任何事情，都由一定的动力驱使的，不管是内在的，还是外来的；抑或只是一个借口或者理由。不同的人，参与开源有着不同的原因。但，弄明白这个动因，是极为重要的。\n有不少的声音提到，参与开源需要用“爱”发电。不知道第一次提出这个说法的人想要传达的信息是什么，但这句话极易使得对开源接触不深入的人产生误解。在经济和时间上都不富有的情况下，“爱好”显然不是一个强有力的驱动。很难想象到，仅凭借“爱好”就可以让你改变思维模式、在一个领域长久地耕耘。\n如果把我们自身比作航行在大海上的一艘船的话，“爱好”可以帮助我们“导航”，而真正让我们得以“远航”的“发动机“还是和我们的职业密切相关的。至少，在社会主义实现之前应该是这样的。\n参与开源的过程中，在选择技术领域、开源项目上，“爱好”在发挥着作用。但是，千万不要偏离了你的“全职工作”。至少，你需要找到二者之间的结合点。\n"},{"id":13,"href":"/open-source-best-practice/open-source-credit.md/","title":"Open Source Credit","section":"Docs","content":"开源项目几乎无处不在，不管是我们日常使用的手机应用，还是访问的网页服务中，都有着大量开源项目的身影，例如：使用极为广泛的 Linux 操作系统（通常不为普通用户所见）、安卓（Android）操作系统等等。大部分的（不管是商业，还是开源的）软件，却很少提到他们所使用的开源项目有哪些，这样也正是绝大部分非软件工程师的普通人对开源无感知的其中一个原因；而随着开源逐渐被更多人认可、拥护，有一些个人、软件公司，已经迈出了非常值得肯定的一步。\n为了表示对这些个人、软件公司行为的肯定，以下是收集的部分公开展示了所依赖的开源项目的软件：\n 如果你之前没有注意过你所使用的软件是否公开展示了所依赖的开源项目，从此刻可以考虑关注下，并帮助完善下面的列表：\n    软件公司（个人） 软件名称 查看路径     阿里巴巴  支付宝 关于=\u0026gt;版权信息   阿里巴巴  淘宝，移动客户端 关于淘宝=\u0026gt;版权信息   田稼东  Noteday 关于    "},{"id":14,"href":"/open-source-best-practice/open-source-write-guide.md/","title":"Open Source Write Guide","section":"Docs","content":"为什么要写本篇文章 #  写作本篇文章的目的是：在编写和开源实践有关的文档内容时，遵守此文档写作规范。以便初次参与开源的人能够更好的理解文章描述内容，找到自己的方向。\n写作指南 #   文档编写可以参考：https://github.com/ruanyf/document-style-guide\n   注意文章写作格式，一些 Markdown 的语法等，灵活使用，使文章内容更具有条理性和可读性；\n  使用正确的标点符号（中英文符号）；\n例如一句话结尾时： 错误：今天太阳很好. 正确：今天太阳很好。   注意专有名词的书写（英文文档注意词性）；\n错误：我们将会使用 spring cloud openfeign 完成服务调用。 正确：我们将会使用 Spring Cloud OpenFeign 完成服务调用。   避免出现缩写内容（或者文章第一次出现时说明）；\n错误：下文中，将使用 SCA 的服务治理能力。 正确： 1. 下文中，将使用 Spring Cloud Alibaba 的服务治理能力。 2. 使用 Spring Cloud Alibaba（后文简称SCA）声明   使用 Markdown 时为不同的代码块指定对应的语言；\n  错误\n{ \u0026#34;user\u0026#34;: \u0026#34;zhangsan\u0026#34;, \u0026#34;age\u0026#34;: \u0026#34;12\u0026#34; }   正确\n{ \u0026#34;user\u0026#34;: \u0026#34;zhangsan\u0026#34;, \u0026#34;age\u0026#34;: \u0026#34;12\u0026#34; }     对文章中一些专有名词提供链接；\n错误：下文中将使用 Github Action 来完成 CI/CD。 正确：下文中将使用 [Github Action](https://docs.github.com/zh/actions) 来完成 [CI/CD](https://www.redhat.com/en/topics/devops/what-is-ci-cd)。   对重点内容使用加粗，下划线等着重强调；\n  明确文章的受众群体，站在受众群体思考，确保对当前受众群体而言，有一定的参考价值。\n  使用合适的人称代词；\n  文章完成之后，自己阅读一下，避免出现错误问题！\n  "},{"id":15,"href":"/open-source-best-practice/ospp.md/","title":"Ospp","section":"Docs","content":"本文试图探索一种以尽量客观地评估开源项目议题（题目）申请人与项目契合度的方法。其中，结合了本人参与 开源之夏、 GSoC 的经验。\n开源之夏组委会给出的办法是，项目议题申请人（学生）与项目（mentor）通过双选的方式来进行匹配。以下，通过一些考察点来给申请者打分、排序：\n   考察点 分值范围 说明     前期沟通 0-10 推荐以公开沟通为主，私下沟通为辅，例如：邮件（列表）、issue 或即时通讯   项目前期参与 0-10 有简单的 issue 或 PR 提交并完成，最多得 6 分；有与议题难度相当的 PR 可得 4 分   综合能力 0-10 沟通过程是否顺畅，是否可以按照项目 CONTRIBUTION 描述的方式参与，是否可以顺利完成 PR 的合并，代码是否规范、是否有相应文档   申请书 0-10 是否可以清晰、完整地描述设计    "},{"id":16,"href":"/open-source-best-practice/others.md/","title":"Others","section":"Docs","content":"还有一些其他的比较推荐的习惯、方法：\n 习惯查看邮件  一定要把自己常用的邮箱地址关联到 GitHub 上，这样才能及时收到 issues 和 PR 中的互动信息   通过电脑、手机来管理自己的日程  开源社区总会有各种各样的会议，如果没有使用日历的习惯的话，非常容易遗忘重要的事情    "},{"id":17,"href":"/open-source-best-practice/platforms.md/","title":"Platforms","section":"Docs","content":"国内外，有很多平台可以帮助建设、发展开源社区。包括有：代码托管、音视频、文章、社交动态等等。\n   类型 名称 描述     代码托管  GitHub 面向全球，约 5600 万用户。   代码托管  Gitee 主要面向中国用户，界面有中英文支持，基于 Gitlab   代码托管  极狐  极狐 旗下的代码托管仓库，基于 Gitlab   代码托管  GitLab    代码托管  GitCode  CSDN 旗下的代码托管仓库，基于 Gitlab   视频  YouTube 全球最大的视频分享网站，以英文为主。部分国家（或地区）可能无法访问。支持多账号管理模式。   视频  哔哩哔哩 中国最大的视频分享网站，以中文为主。   播客  喜马拉雅 中文播客   播客  小宇宙    文章  微信公众号 以发布文章为主，同时支持音视频。   文章  V2EX 以中文用户为主，虽然没有看到社区账号注册，但内容质量非常不错。   文章  开源中国 以中文用户为主。   文章  思否 包含问答、文章专栏、招聘等板块。以中文用户为主。   文章  InfoQ    文章  DEV 以英文用户为主。   文章  reddit 以英文用户为主。   社交动态  Twitter 面向全球。部分国家（或地区）可能无法访问。支持多账号管理模式。   社交动态  领英    社交动态  即刻    活动发布  活动行 以中文用户为主。   活动发布  百格活动 以中文用户为主。   活动发布  Meetup 面向全球，没有中文支持。   即时沟通  Slack    即时沟通  Gitter    即时沟通  微信 中国最流行的交流工具。   即时沟通  telegram    即时沟通  飞书 支持的群模式：对话、话题式。入群二维码支持设置自定义有效期（包括永久有效）。   捐助  爱发电    捐助  Open Collective 面向全球。部分国家（或地区）可能无法访问。   文档协作  Google Document 面向全球。部分国家（或地区）可能无法访问。   文档协作  HackMD 以 Markdown 的方式编辑。部分国家（或地区）可能无法访问。支持多账号管理模式。   文档协作  石墨文档    在线会议  Google Meet 在浏览器中运行，无需安装客户端。不支持录屏。   在线会议  腾讯会议 以中文用户为主，录屏方式支持本地、云录制。有降噪功能，但偏弱。   在线会议  飞书 支持：录制、虚拟形象、虚拟背景。   日程管理  Doodle 可用于多人以投票的形式选择合适（活动、会议）的时间段。   日程管理  Google Calendar 可作为社区公开的、可订阅的活动、会议的日历   日程管理  飞书日历 亮点，可以同步第三方日历，如 Google Calendar、Outlook、Exchange 等。更多可见：https://www.feishu.cn/hc/zh-CN/articles/665183342590     欢迎读者帮忙推荐更多的平台，以及完善平台的描述。\n推荐标准：\n 在某个领域有较大的影响力 可以帮助开源社区做技术传播（列举出某个知名社区在该平台上有活跃的账号） 支持免费使用   "},{"id":18,"href":"/open-source-best-practice/README-en.md/","title":"Readme En","section":"Docs","content":"Open-source Best Practice #   \nWhy? #  Why do I want to write the \u0026ldquo;Open-source Best Practice\u0026rdquo;?\nThose who want to participate in an open-source project generally feel confused about where to get started. Hopefully, this practice can help more people. I believe that you can improve yourself no matter you work in a role as an ordinary developer or other roles.\nYou may already know about certain existing open source guides, such as \u0026ldquo;Open Source Guides\u0026rdquo; which GitHub wrote. So, what\u0026rsquo;s the difference between those guides and what I write here? Open source is more than just sharing your code. The more important part is the collaboration with other contributors and how to do it.\nTo make a difference, I\u0026rsquo;ll try to explain it from the practice aspect.\nGet started #  Please read the project README carefully, and follow the process in the CONTRIBUTION.\nIn the early days of a new project, especially in an unfamiliar field, here are some ways to help you contribute to an open-source project.\n Document contributions. This is a very effective way to learn about a project. Usually, we can fix typos, punctuation, grammatical errors, broken links, and so on as we read the document. Good-first-issue. For projects that want to receive more contributions, the tag will be added to issues that are easy to fix.  Issues #  Common Misunderstanding:\n Only title, without content. Only result and phenomena, without background.  There are many possible causes for a problem, and no one can guess your environment and operation steps.   Only screenshots, without error, exception and keywords in content.  If there is no text, it is not convenient for others to search.    Best Practice:\n Add a new issue after confirming the problem is not in the existing issues. Be familiar with the language of regulations that correspond to community expectations, and follow them. The title should be concise and standardized Make a classification, and you can do this by label or title prefix  Common title classification: Question: xxx, Proposal: xxx, Bug: xxx   The issue relevant to the UI needs screenshot(s).  Pull Request #  Common Misunderstanding:\n Use a single branch(like master) to commit changes. Many different updates and fixing in a single PR. Continually add new content in a single PR. Merge your own PR. Use instant messaging to urge specific people to review your PR.  Best Practice:\n Before submitting PR for the first time, browse some successfully merged PRs and take a look at the comments and format, etc. If the problem to fix already has a related issue, please assure that nobody submitted the corresponding PR. Then, please leave a comment about your fix plan. If you want to submit several changes, please add the issue first. And describe your thoughts according to the actual situation(like difficulty and controversy) A PR only contains changes of the same type. Add a new branch for each submit. Avoid repeatedly closing and creating PRs for the same topic  Avoid making frequent submit for the same PR, which makes it difficult for reviewers to review the PR. If your PR is not already prepared for accepting review, please add prefix WIP before the title until you think the PR is ready for review. When making revisions based on reviewers' suggestions, avoid forced push --force, making reviewers unable to check your newest changing part. Keep your commit records as elegant as possible. In case there are too many reviews, the project owners will decide whether to squash your commit records at merge time.   Give as much detail as you can about your PR, like related issues(s), solving problems, and any context convenient to review.  Provide screenshots of the effect before and after modification if it is related to UI. List your self-test process as appropriate. Give your reason for the controversial part.   If your PR hasn\u0026rsquo;t been reviewed for more than a week, try to cc* related teams.  If there is no related team to cc, you can find someone who has merged similar PR recently and explain that it is because there is no other way, and I apologize for bothering you. cc stands for carbon copy which means that whose address appears after the cc: header would receive a copy of the message. Also, the Cc header would also appear in the header of the received message.    Review #  In the process of PR review, there are usually three roles involved: AUTHOR, MAINTAINERS, and others.\nFirst of all, we need to figure out a question, why do we need a review? The review is critical, no matter it\u0026rsquo;s code, documentation, or other types of files submitted in PR.\n The expression of the most basic principles of open source(transparency and openness).  The Review process is a manifestation of the open source spirit. In the Review, we need to open not only about the results but also about the process. Review does not mean an audit. Everyone can be a reviewer, and everyone will learn in this process.   Life cycle  PR does not apply to urgent merging needs. After submitting the PR, the author should check it by himself first. If there is any problem, please mark it as \u0026ldquo;work in progress.\u0026rdquo;  We can add a prefix: WIP of PR that is not ready for review. If you are unsure about a specific part of the code or documentation, you can express your opinion directly in the form of a comment.   Review and merge within 2 to 7 days.   Politeness  No one should review your PR, including maintainers. Thanks to each reviewer who contributed to your PR merge. Don\u0026rsquo;t rush anyone to review your PR during the best review cycle. If you do need to ask for a review for help, please give instructions. And @ a team first, then directly @ a person, and apologize for interrupting.   Make a clear point.  Try to avoid giving vague comments, and the writer needs to make changes based on the suggestions you give. If you are not sure about the question, you can comment like this: \u0026ldquo;I have a feeling there may be a problem here,\u0026rdquo; give the suggestion and why, and indicate that the comment does not block the PR merge. For the part in question, give information or data that support your point. If relevant authoritative information is available, you can attach a related web link.  For example, code comments in PR are not standard, giving the official community documentation links.     Automated process  Manage the review process with an automated tool like Lighthouse Run as many automated tests as possible (unit tests, E2E tests, stress tests, etc.) before merging. Avoid human intervention in automated processes If a review is completed, but some manual verification is needed. To avoid an untimely automatic merge, you can block it with a comment command.  For example, comment /hold to prevent robot-account auto-merging.      Community Operation #  Different people have different understandings of the word community. The word community in this article is precisely the open-source community.\nThere are many excellent practices and ways in community operation, such as social media, Meetup, and TOC.\nSIG Operation #  Determine the admittance and approval system of the SIG, and then control the number of SIG according to the team\u0026rsquo;s actual situation. In this process, the quality of operations is the primary consideration.\nThe healthy development of SIG cannot be separated from openness, transparency, and diversification. There is no sense in existence for the formalistic and non-open-source SIG.\nSIG Meeting #   Meeting time should accommodate the needs of the majority of people  Voted on via Doodle or similar tools   Each meeting should have an opening and a closing statement  Start as: Let\u0026rsquo;s begin our regular meeting today; End by saying, \u0026ldquo;Thank you very much for coming to today\u0026rsquo;s community meeting,\u0026rdquo; and so on.   Welcome new members with enthusiasm and encourage self-introduction Give the necessary context introduction  Whether for the participant dial into the meeting or watch the replay, it may be the first participating time for them. The lack of context makes it difficult for them to follow the discussion. If there is a textual context introduction, try to include it in the minutes.   The moderator should control the time and pace of the meeting  Try to limit the time to one hour, and put the remaining topics into the next meeting. Assist and guide the conclusion of the discussion   Use appropriate expressions  Avoid phrases like \u0026ldquo;We discussed that yesterday.\u0026rdquo; New community members won\u0026rsquo;t be able to follow what you discussed.   Make sure meetings are regular  In general, meetings once every two weeks are moderate. If the number of participants is relatively large and distributed in different time zones, two meetings can be divided based on participants' opinions. Notify the community as early as possible of canceling the meeting when no one available to chair the meeting can attend or in other cases where the meeting needs to be canceled.   The minutes of the meeting  We can use Google Document for text records. We can use YouTube for video records.    Others #  Here are some other recommended practices:\n Check your email  Please associate your usual email address with GitHub, and then you can receive the notice information in issues and PR in time.   Manage your schedule through your computer and mobile phone  There will be various meetings in the open-source community, and it\u0026rsquo;s easy to forget important things if you\u0026rsquo;re not in the habit of using a calendar.    References #    Google Engineering Practices Documentation  Projects that adopt the practice #    Halo  "},{"id":19,"href":"/open-source-best-practice/README.md/","title":"Readme","section":"Docs","content":" 本文潜在的目标人群：\n正在（或希望）从事以下工作的人：技术岗（研发、测试、运维）、运营、市场，其他对开源开放性协作感兴趣的人。\n  \n为什么？ #  为什么要编写这一份《开源最佳实践》呢？\n对于初次尝试参与开源的人，在面对完善、成熟、大型的开源项目时，往往会有无从下手的感觉。《开源最佳实践》将从如何选择合适的项目、如何参与贡献等多个角度引导读者。\n国内（中国）已经有 Gitee 发起并由众多开源爱好者共同编撰的 《开源指北》，还有 GitHub 官方提供的 《开源软件指南》，那这一份最佳实践和这些有什么区别吗？开源不仅仅是把代码开放出来就好了，更加重要的是一种协作精神的体验，以及具体落地操作。所以《开源最佳实践》更多会从落地实践的角度来讲述。\n不管你是一名普通的研发，还是一名非技术人员，参与开源必将使你受益匪浅。万事开头难，希望这一份最佳实践可以帮助到更多有意参与开源的人们。\n寻找起点 #  参与开源有很多的形式和途径，对于刚开始接触开源的人而言，非常重要的一点就是——基于已有的经验、技能选择适合的开源社区，并且 坚持较长的一段时间。\n开源社区通常会在一些平台托管代码、发布文章或音视频资料，大家可以在这些 常见的平台中寻找适合自己的社区。\n对于一个开源社区来说，通常可能会有多个开源项目。社区的自我发展，也要求不同技能、不同背景的人加入，而为了保证社区以公开、透明、平等的方式得以适当的治理，也会出现多种不同类型的项目。例如：存放社区治理规则的 community 项目，存放与图片设计、logo 相关的 artwork 项目，存放社区文档、网站的 website 项目等等。甚至，在发展过程中还可能会出现“子社区”。\n和传统的、自上而下的团队管理不同，在开源社区里，虽然存在着不同的角色、分工，但这些角色既不是任命也不是申请来的。角色或影响力，都只能通过贡献（contribution）获得，任何人没有所谓的特权。如果你已经习惯了按部就班地完成分配好的任务，在开源社区里可能会有无所事事的感觉，进而找不到自己的“位置”。而对于愿意自发地做事情、喜欢拥抱变化、追求变得更好的人而言，则会在开源社区中找到“如鱼得水”的感觉。排除涉及到权限的事情，大部分情况下都是不需要“等拿到授权后”再行动。例如：代码（或其他类型的 Pull Request）的 review 并不是 maintainer 独有的权力，每个走过路过的人都是可以针对自己熟悉的领域给出观点、评价。\n接下来，会从不同的角色、角度来阐述如何更好地参与到开源社区中。\n贡献者 #  对于贡献者（contributor）来说，熟悉 通用的贡献指南可以在参与贡献的过程中少走弯路、获得更多帮助。\n维护者 #  项目的维护者（maintainer），通常指的是有合并（Pull Request）权限的贡献者。在不同的社区中可能会有不同的叫法，例如：committer、 PMC(Project Management Committee)、owner 等等。维护者更多的会考虑如何促进项目、社区的健康发展，以及 review 相关仓库的 PR。\n关注贡献者 #  项目维护者，一般情况下是愿意花更多精力、时间到某个项目上的人。如果是纯个人项目，或者并没有期望有很多贡献者协同参与的话，并不需要特意关注贡献者，只做自己喜欢做的事情即可。反之，维护者更多应该做的事情是去关注贡献者，帮助愿意参与项目的人贡献他们的聪明才智，也就是所谓的发挥“杠杆作用”。换个角度考虑，对于“能力很强”但对上述事情没有兴趣的话，其实是没有必要赋予“维护者”的权限。\n那么，对贡献者的关注包含哪些方面呢？\n 定期查看新提交的 issue、PR，通过打标签（label）等方式进行分类，根据情况 ping 相应的团队（或者贡献者）； 时间允许的情况下，选择自己熟悉领域的 issue、PR 做尽可能详尽的回复。切忌随意回复，随意对自己和其他贡献者都是不负责的一种行为，同时也是对时间的浪费； 邀请贡献者参加社区的各类活动，例如：社区例会、Meetup 等。鼓励贡献者深度参与社区； 熟知成员的贡献，在相应的社区角色、奖励（ambassador、top contributor 等）给与提名； 发现、挖掘潜在的项目维护者。  Review #  在 PR 的 review 过程中，通常会涉及到三个角色的人：作者、维护者、其他。\n首先，我们要想明白一个问题——为什么要进行 review ？不管 PR 中提交的是代码、文档还是其他类型的文件，进行 review 的都有着非常重要的意义。\n而不管是对项目维护者，还是贡献者而言，了解如何 review 以及在 review 过程中 有哪些需要注意的地方，都是很重要的一件事情。\n社区治理 #  随着社区规模的变大，社区治理的重要性会日益凸显，可能遇到的以下问题：\n 如何帮助新人快速地熟悉、适应社区的氛围、玩法； 如何利用适当的社媒、多媒体平台宣传社区理念、技术，吸引有相似兴趣的人加入； 如何结合社区成员自身的特点、发展诉求，通过复盘、再组织等方法，适时地调整社区结构； 如何从合规（许可证选用、商标、专利等）层面确保社区的利益； 如何维护社区基础设施； 如何设置沟通、交流底线（或规则，code-of-conduct），避免不好的行为、言论。  对于社区（Community）这个词，不同的人有着不同的理解。本文的社区专指：开源社区（Open Source Community）。\n在社区运营过程中，有很多好的实践和方法，例如：Technical Oversight Committee (TOC)、SIG、Meetup、Workshop（工作坊）、社交媒体推广等。下面，给出部分组织形式的最佳实践指导。\nTOC #  TODO\nSIG #   Special Interest Group，特别兴趣小组，简称 SIG。在大中型开源社区中，这是一种便于社区成员在特定领域交流、讨论，更加聚焦地解决相关问题的组织形式。\n开源社区中，可以根据不同的领域设立相应的 SIG。每个 SIG 往往会有一名或多名 lead（领队），以及多名活跃的社区成员作为 SIG 的成员（member）。在不同的社区中，领队可能会有不同的叫法，例如：co-chair、co-lead 等。值得注意的是，这里所使用的表述是——“领队”，而不是领导、经理（manager）、管理员（admin）、负责人；领队的重要意义在于维护 SIG 的积极、活跃，而不是特权。\nWork Group #   TODO\n活动 #  不管作为开源活动的组织者还是参与者，相信这份 开源活动指南可以给你提供一些帮助。\n参考 #    Google Engineering Practices Documentation  开源相关音视频  开源相关书籍  英语学习资料  开源商业公司融资情况  有公开展示所依赖开源项目的软件  杂项  采用该实践的项目 #  如果你比较认同这一份最佳实践，欢迎把下面的 badge 添加到你的项目中：\n[![LinuxSuRen/open-source-best-practice](https://img.shields.io/static/v1?label=OSBP\u0026amp;message=%E5%BC%80%E6%BA%90%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\u0026amp;color=blue)](https://github.com/LinuxSuRen/open-source-best-practice) "},{"id":20,"href":"/open-source-best-practice/review.md/","title":"Review","section":"Docs","content":" 开源最基本原则的体现，公开、透明  如果连 review 都不做的话，何谈开源？要公开的绝不仅仅是结果，更关键的是要公开过程 review 绝对不是审核的意思，任何人都可以是 reviewer，大家都有可以在这个过程中有所收获   生命周期  PR 不适用于有紧急合并需求的情况 提交完 PR 后，作者首先应该自行检查一遍，如果发现还有问题的话，请标记为“进行中”  我们可以把还没准备好 review 的 PR 的标题加上前缀：WIP: 作者如果对某些代码（文档）不是很确定，可以直接把你的观点以评论的形式表述出来   在 2～7 天内完成 review 并合并   礼仪  没有人有义务对你的 PR 进行 review，包括维护者 每一位 reviewer 都对你的 PR 合并提供了帮助，对他们表示感谢 在最佳的 review 周期内，不要去催促任何人对你的 PR 进行 review 如果确实需要请求 review 帮助，请给出说明，并且优先 @ 某个 team，其次才是直接 @ 某个人，并对打扰表示歉意   明确你的观点  尽量避免给出模棱两可的评论，作者需要根据你给出的建议来决定是否要进行修改 对于你不是很确定问题，可以这么表述：”我感觉这里可能有问题，给出建议的做法以及理由，并指明该评论不阻碍 PR 的合并“ 对于你很确定有问题的部分，给出可以证明你观点的信息或者数据，如果有相关权威资料的话，一并给出链接  例如：PR 中代码注释不规范，给出官方社区的文档链接     reviewer  任何人都可以是 reviewer，只要是你认为有问题（或可以改进）的地方，都可以提出来，并且给出可以证明你观点的证据、资料链接 优先请求一个 team 帮忙 review，这样的话，你可以得到更多人的帮助 通常情况下，每一个文件都是由多名贡献者共同完善的，可以考虑让最后一次修改该文件的贡献者帮忙 review 如果你尝试解决的问题或者新增的特性来自另外一名贡献者创建的 issue，那也可以尝试寻求该贡献者的帮助   自动化流程  利用类似于 Lighthouse 的自动化工具来管理 review 流程 合并之前尽可能多地运行自动化测试（单元测试、e2e 测试、压力测试等） 避免人为干预自动化过程 如果 review 完成，但还需要一些人工验证的话，为避免过早自动合并，可以通过评论命令来阻碍  例如：通过评论 /hold 来阻止机器人账号自动合并      "},{"id":21,"href":"/open-source-best-practice/sig.md/","title":"Sig","section":"Docs","content":"SIG 是个不错的组织形式，但 SIG 并不是“银弹”，并不能适用于所有社区。具体是否要采用 SIG 机制，还是得根据社区当前的情况而定。\n发起 #  SIG 往往是为了让部分社区成员以相对集中的形式讨论、改善、解决某个领域，而社区也会给与 SIG 一定授权。SIG 的创立通常需要至少一名发起人作为 lead， 至少三名对该领域感兴趣的成员。\n社区为了更好地管理 SIG，也通常会给出相关的制度（或章程），希望发起一个新 SIG 的成员基本按照约定完成相应流程即可。例如下面的模板：\n背景介绍，重点阐述社区现状（问题、希望改善的地方）。 成立 SIG 后，说明希望解决的问题，以及大致的运作模式。 SIG 成员列表。建议成员的构成具有一定的多样性，也就是尽量是来自不同的企业、或是以个人身份加入。 给出 SIG 的交流、沟通渠道，例如：邮件列表、Slack、例会，以及讨论的记录（文字、视频等）。 会议 #  SIG 通常是以线上（online）的形式存在，而例会则是非常重要的部分。大家可以在会议上分享社区动态、项目进度，也可以就某些问题、提议进行讨论。\n以下是会议主持人通常需要考虑的：\n 会议时间的选择，尽量考虑多数人的需求  通过 Doodle 或类似的工具供大家投票选择   每次会议都要有会议开始和结束的表述  可以参加在线例会的成员，毕竟是有限的。因此，可能会有很多人通过视频回放的方式来“参加”例会。对于首次参加例会，或观看视频回放的成员来说，如果主持人不对例会做简单概述的话，可能难以理解会议内容、融入 SIG 活动。 例如：现在开始我们今天的例会，主要的议题是xxx；结束时可以说：“非常感谢各位参加今天的社区例会”等等的   热情地欢迎首次参加例会的成员，并鼓励做自我介绍 做必要的上下文介绍  假设参加会议的大部分成员，对要讨论的内容并不熟悉 不管是拨入会议还是观看回放的人，都可能是首次参与，缺少上下文会导致他们难以明白相关讨论 如果有文字性的上下文介绍，尽量在会议记录文档中有体现   主持人要把控会议时间、节奏  尽量控制在 1 小时内，未讨论完的议题放到下次讨论 在讨论过程中帮助、引导得出结论   使用适当的表述方式  避免使用类似于“我们昨天讨论过xxx”的表述，社区成员无法了解到你们讨论的内容   确保例会的周期性  通常情况下，每两周一次的例会比较适中 当参与者人数相对较多，而且分布在不同时区的话，结合参与者的意见可以分两个会议 当可以主持会议的人都无法参加，或者其他需要取消例会的情况，尽早地通知社区会议取消 主要成员所在国家（地区）的法定节假日前，也应该提前取消   会议记录  文字记录，可以使用 Google Document 或者 腾讯文档 会议的录屏文件，可以根据会议参与者使用的语言不同，中文可以选择 哔哩哔哩，英文可以选择 YouTube    原则 #  SIG 的健康发展，离不开公开、透明、多元化等原则，流于形式的、不符合开源精神的 SIG 没有存在的意义。\n退休 #  定期（例如一年）考察每个 SIG 的运转情况，如果长期没有会议进行，SIG lead 及成员也没有意愿（可以通过 GitHub issue 或其他渠道来确认）继续维护的话， 可以考虑将 SIG 关闭或退休（retire）掉。\n长期不活跃的 SIG，会给新关注到社区的人带来很大的“误解”或困惑，他们可能认为这个社区缺乏治理、活力。因此，社区的 lead 如果希望能有源源不断的新成员加入的话， 就不能任由 SIG 的“堕落”。\n采用 SIG 的开源社区 #     名称 备注      CD Foundation  Linux 基金会 旗下的子基金会    Jenkins CI/CD 领域    KubeSphere 由 青云 发起，聚焦在云原生领域    openEuler 由 开放原子开源基金会 （OpenAtom Foundation）孵化及运营的开源项目    云原生社区     Kubernetes 容器调度平台    KubeEdge 边缘计算    OpenHarmony 操作系统    MindSpore 人工智能    openGauss 关系型数据库    FAQ #   SIG 可以等同于社区的技术领域划分吗？  SIG 不仅仅是领域的划分，更重要的是一个供社区成员交流、讨论以及行动的场所。    参考 #    Special interest group - Wikipedia  "},{"id":22,"href":"/open-source-best-practice/community-manager.md/","title":"Community Manager","section":"Docs","content":"社区运营的工作基本是通过适合的形式（宣传资料、活动等）让开源项目的目标人群（开发者、最终用户等）了解到项目的特性、动态、参与方式等。 可以认为社区运营做的是牵线搭桥的事情，可能是让最终用户自行阅读文档、查看视频并体验项目，抑或是让项目的开发者（maintainer、contributor） 分享他们经验、观点等。\n技能清单 #  作为社区运营，可能需要拥有以下多项技能：\n 考虑对能力进行分组，难易程度区别\n  沟通能力（线上、线下） 文案编辑 对相关媒体平台的了解、使用 活动组织 基本的数据统计、分析 业内人脉圈 音视频剪辑 基本的图片编辑能力 公开演讲（分享） 公开活动主持 相关（开源项目）技术的理解力  分工 #  TODO\n误区 #  TODO\n薪资范围 #  TODO\n机遇和挑战 #  作为社区运营，成长轨迹如何，又有哪些机遇和挑战呢？\n致谢 #  本文的形成，得益于以下业内朋友的支持、观点。\nTODO\n"},{"id":23,"href":"/open-source-best-practice/devrel.md/","title":"Devrel","section":"Docs","content":" This file was generated by devrel.tpl via yaml-readme, please don\u0026rsquo;t edit it directly!\n  考虑到绝大部分做 DevRel 工作的人，是需要面向全球的，应该都有一定的英语基础，以下都采用英文编写。\n People #  Learning from other people who is doing the DevRel work might be a good idea. Please feel free to mainaintain the following table with me.\n   Name Organization Contact     Adam DuVander   :octocat:    Anthony Kiplimo       April Speight   :octocat:     Arkodyuti Saha   :octocat:     Hassan El Mghari  Vercel  :octocat:    Jen Sable Lopez       Jono Bacon   :octocat:     Mary Thengvall   :octocat:    Matthew Revell   :octocat:     Michael Heap  Kong  :octocat:      Others #    Jobs in DevRel  https://developerrelations.com/jobs  https://devrelweekly.com/  https://tinyletter.com/developeravocados  "},{"id":24,"href":"/open-source-best-practice/jobs.md/","title":"Jobs","section":"Docs","content":" This file was generated by jobs.tpl via yaml-readme, please don\u0026rsquo;t edit it directly!\n  本文中，如没有特指的话，指的都是开源相关的，例如：社区指的是开源社区\n 本文介绍有哪些工作是与开源紧密关联的\n 社区运营（Community Manager） 开发者关系（DevRel，Developer Relations） 技术布道师（Evangelist） 文档工程师（Technical Writer） 研发（Developer）  Community Manager #  TODO\nDevRel #  DevRel（Developer Relations, or Develoepr Advocacy），在全球范围内还是相对比较新的一个岗位， 尤其在国内鲜有设立全职的岗位。很多在维护（主导）开源项目的公司，会让研发或社区运营人员兼职地做 DevRel 相关 的工作。\nDevRel 是一个有着成本投入却无法看到直接营收的团队。 Michael Heap 在 2021 年的 DevRelCon 上有着非常形象的描述：DevRel is a cost centre. 想要了解更多有关 DevRel 这个 岗位的资料，请查看 这里。\nEvangelist #  TODO\nTechnical Writer #  通常来说，当开源商业化公司发展到一定阶段时，会招聘专职的 Technical Writer（技术文档工程师）。对于一个开源项目而言， 文档是极其重要的，因为文档可以让用户完整、详细地了解到项目。从内容输出的角度来看，文字相较于音频、视频而言是一种 成本相对低廉的形式，而且易于开源社区成员协作、共创。\n更多有关改岗位的介绍，请查看 这里。\nDeveloper #  对于技术类开源项目，研发人员显然是非常重要的一个角色，人数占比也比较大，甚至以开源项目为基础创业的商业公司的早期阶段中所有人员 都是研发。而越来越多的研发类 JD（Job Description）会把参与开源项目作为加分项之一。\n但由于商业化模式的不同，对研发人员的要求也有着不同的要求，例如：关注项目最终用户数量的公司，与普通的商业化公司相差无几； 可那些关注开发者体验的公司，则更希望研发人员认同、拥抱开源理念。因此，研发人员在开源领域中寻找新的工作机会时，还是有必要事先 了解下目标公司的开源商业模式的。\n公司 #   如果您所在（或了解）的公司在维护开源项目，有响应的开源工作岗位的话，欢迎一起完善下面的列表。 收录方式：请在目录 items 下添加文件名（格式：job-xxx.yaml）的 YAML 文件。 文件内容请参考其他文件中的字段。\n  注意：本列表只收集至少有一半工作时间在做开源相关事情的岗位。\n    Company Job Package Remote      第四范式  开源社区运营      浙江大应科技  开源布道师 40k-60k·15薪     Amazon  Senior Developer Advocate      字节跳动  开源布道师（数据仓库）      Chainlink  Developer Advocate  :white_check_mark:    ConsenSys  Lead Developer Advocate (Snaps Platform)      艾拉云科  开源布道师 30-50K     秒如科技  开源布道师 28-55K·14薪     Jetbrains  Web and JavaScript Developer Advocate  :white_check_mark:    Jetbrains  Developer Advocate (PyCharm)      Jina AI  Open Source Technical Evangelist  :white_check_mark:    Nebala Graph  开发者布道师  :white_check_mark:    Nebala Graph  技术社区运营总监  :x:    麒麟软件  开源布道师 18-35K     Orbit  DevRel Analyst  :white_check_mark:    鼎石纵横科技  技术布道师 25-50K·16薪     StreamNative  evangelist  :white_check_mark:    涛思数据  开发者布道师 28-40K·16薪     Weaveworks  Developer Advocate/Experience Engineer  :white_check_mark:    And you could find open-source-related jobs from the following resources:\n  todogroup/job-descriptions  "},{"id":25,"href":"/open-source-best-practice/tw.md/","title":"Tw","section":"Docs","content":" This file was generated by tw.tpl via yaml-readme, please don\u0026rsquo;t edit it directly!\n  本文主要讨论在开源项目中的 Technical Writter（以下简称 TW）\n 基本要求 #  众所周知，开源是面向全球的，通常都会对英语写作能力有着较高的要求。\n下面是部分团队对英文的要求：\n  通过英语专业八级考试（TEM-8，Test for English Majors-Band 8）  在不少的开源团队中，研发、TW 都会首先输出英文资料（文档、教程、博客等），而其他语言（中文、小语种）可能会考虑通过社区协作、内部员工等方式来输出。\n常规工作 #  TW 最基本的工作可以包括以下三部分：\n 技术文档输出，这一点基本会随着开源项目的 feature 来迭代 Release notes、Changelog 教程（文字、视频）  对于技术文档来说，要比其他两个相对复杂一些，往往需要 TW 对所负责的开源项目在技术层面有相对比较深入的了解，至少需要能够做到：了解必要的技术背景、简单的环境搭建、熟练地使用项目完成基本的 use case 等。除技术本身外，由于开源项目通常都会按照版本进行划分，而文档自然也需要提供对应的版本。\n在语言之外，以下是开源项目中的主流技术搭配使用，也几乎可以认为是对 TW 的基本要求：\n  熟练使用 GitHub，以及可以在终端熟练地使用 git 命令  Markdown 常见语法的使用  Hugo 等静态网站构建工具 Linux 基本操作  更多工作 #  在 TW 团队规模较大的情况下，往往会有更细致的分工，以及更多的职责。例如：社区具有一定规模的请下，TW 可能需要组织社区共建者（Contributor）参与到多语言的共建（Contribution）中，甚至还可能会成立、组织 SIG（Special Intested Group），并定期组织社区例会。\n这时候，作为 TW 仅仅能完成技术文档的输出可能就显得不够了，熟悉、践行开源理念，并与开源同行进行更多的交流、互动会显得日益重要。如果说，某个开源项目的共建者（Contributors）都隶属于某家商业公司的话，从开源的角度来看这个项目其实是失败的，即便这个项目有着再多的 star 数，对于代码或文档类项目都是如此。\n协作 #  作为 TW 往往需要与不同角色的人进行合作，例如：产品经理、研发、测试、运营、市场等，尤其会和研发有着紧密的协作。在与不同角色、背景的人合作时，如果能了解、掌握一些沟通技巧时，往往可以有事半功倍的效果。以下，针对不同角色的人合作，提供一些技巧。\n在国内很多人交流后，有个相对普遍的观点是：研发往往不太喜欢写文档，工作安排普遍紧张（难以抽出时间来），写的文档容易出现省略基本的技术背景介绍等等。（在没有数据统计的情况下，这些论断可能是相对主观的，仅供参考）针对以上提出来的一些问题，笔者认为都是有相应原因的，了解这些背后的缘由，则可以帮助我们更好地互相理解、协作。\n选择从事研发工作的人，往往对逻辑性的问题比较有兴趣，而在他们的职业生涯中如果没有对文档编写有过硬性要求的话，随着时间的推移，对文字编写、自然语言的技能则逐渐弱化。而从心理学的角度来看，人们通常会不由自主地选择逃避自己的“短板”。这可能是“研发不爱写文档”的一个典型原因。\n而对于研发工作量大、没时间写文档等，则是一个具体的现象，并不是 TW 在与研发合作编写文档时遇到的困境的原因。假如，研发负责人（甚至在整个公司、团队的理念、文化中）并不认为文档属于软件交付过程中不可缺少的一部分，或者是认为研发只要输出代码即可，那么，在安排工作时就不会给文档编写预留足够的时间。在这样的公司理念的影响下，研发人员就会自然地以工作繁忙为理由选择推脱甚至拒绝相应的文档工作。简单来说，这是自上而下产生的问题。\n至于文档编写过程中，可能会缺少一些必要的技术背景介绍，则也许是由于缺少训练而导致的一个普遍性的问题。除非是有着非常资深背景的人，在很多情况下，研发人员不会有编写大量文档的机会，很难在短时间内克服；这也正是需要专业 TW 加入的理由。\n从每一位 TW 和整个公司、团队的角度，可以考虑不同的解决方案：\n在自上而下管理风格的团队中，想要通过提出建议而改善情况有可能会逐渐演变为你讨厌团队的导火索。但笔者追求的是，把感性的烦恼转换为理性的思考，以更加健康、可持续的姿态来对面问题、解决问题。当然，这里不是反对大家给团队提出你的宝贵建议，而提倡的是以“无心插柳”的心态来提建议。以人为本，把与你合作的研发当做良师益友来看，他（她）也会有职业上、工作上的困扰，试着去了解并与之一起解决，至少可以推心置腹地进行几次沟通；相信在帮助对方过程中，他（她）也会尊重、理解、配合你的工作。\n如果有能力从整个公司、团队角度来改善、解决这个问题的话，可以考虑强制约束研发要写文档，以及在新人招聘的流程中加上对文档技能的考察，并告知公司对文档编写的相关规定。当然，团队管理本身是一个非常复杂的话题，这里无法一一展开，实际落地过程中也会遇到各种各样的问题，坚持做对的事情并及时复盘（review）可以助你一臂之力。\n成长路径 #  对于 TW 的成长路径，笔者认为除了可以从初级、中级、高级这些职级上来衡量，也可以从对 TW 这个行业甚至跨行业的视角从细节到整体再到细节的来考量，稍微具体一点的话，可以参考下面的表述：\n 完成团队分配到自己的任务 能够发现本职工作以外的问题并协同解决 能够组织同事（同行）解决更大层面上的问题 开始关注、了解整个行业的现象、事件与发展趋势 逐渐能够在行业交流（会议、论坛、社交网络）中发表自己的观点 未知的跨域探索  Credit #  Thanks for all those friends who helped me with this project.\n  Sherlock Xu (Content Strategist | Localisation Engineer | Kubernetes Certified (CKS/CKA/CKAD))  Sylvia (🍓づ♡ど🍓)  Fei Han (Study hard and you'll improve everyday.)  "},{"id":26,"href":"/open-source-best-practice/workgroup.md/","title":"Workgroup","section":"Docs","content":"采用 Work Group 的开源社区 #     名称 备注      Harbor 由 VMware 开源出来的镜像管理平台    KubeEdge 边缘计算    "},{"id":27,"href":"/open-source-best-practice/workshop.md/","title":"Workshop","section":"Docs","content":"对于技术类社区，Workshop（工作坊）是一种比较常见的活动形式，可以作为 Meetup 的配合或补充。不像 Meetup 那样，Workshop 通常没有主题分享， 而是以动手为主。因此，有时候大家也把 Workshop 叫做“动手训练营”。\n在 Workshop 中，大致会有三类角色的人参与：\n 教练（导师），通过演示、安排任务等方式来给参与者展示某种技术的使用方法 助理，对于人数相对较多（例如：20+）情况，教练可能无法做到对所有参与者的疑问一一解答，这时候助理就可以帮助解答 学员，也就是对某种技术感兴趣的人群  活动形式上，相比于常规的分享类活动，也有一些要求：\n 确保每位参与者都有放置笔记本电脑的座椅 足够的插线板 尽量有公共可用的 WIFI  常规 #  TODO\n沉浸式 #  所谓“沉浸式\u0026quot;旨在让参与者有机会深度了解、参与到某个开源项目中，甚至能“及时”收到项目维护者（maintainer、reviewer）的反馈。 这对于接触开源时间不长的人群，是非常有帮助的。\n为了让参与者可以相对容易地了解某个开源项目的参与方式，预先准备 good-first-issue 若干。 准备好的 issue 可以在发布活动时一并给出，方便感兴趣的参与者提前了解。\n另外，非常重要的一个环节是 reviewer 团队。建议事先邀请一些 reviewer，在活动期间及时给与 PR（Pull Request）相应反馈（comment）。 如果 reviewer 分别在线上、线下（活动现场）都有的话，更符合常规的开源贡献流程，效果更佳。\n活动的流程可以参考如下：\n  开场，介绍本次活动的背景、大致流程\n 参考时间：10 分钟    介绍活动中涉及的 issue，可以讲解下相关技术背景、大致解决思路\n 参考时间：30 分钟    大家自行挑选 issue 来做\n 参考时间：2 小时，和 review 同步    项目维护者对提交的 PR 进行 review\n  大家共同讨论、分析参与者的参与过程，并给出建议\n 参考时间：2 小时    建议给活动预留 5 个小时左右，让项目维护者与贡献者得以充分交流。\n"}]